HW
Client_Server
1) Прочиать про клиент-серверную архитектуру

Клиент-серверная архитектура это вычислительная или сетевая архитектура, в которой сетевая нагрузка распределены между поставщиками услуг (серверами) и заказчиками услуг (клиентами). Как правило, основная нагрузка расположена на сервере, который является мощной вычислительной машиной, а клиент может быть гораздо менее производительным, так как основные функции выполняются на сервере. Клиент лишь получает данные с сервера и отображает их в удобном для ползователя виде. Но может быть, что основная нагрузка ложится на устройство пользователя, хоть он и является клиентом, а сервер лишь хранит данные. Таким примером могут быть онлайн-игры.

Уровни клиент-серверной архитектуры:
- Двухуровневая: клиент, сервер;
- Трехуровневая: клиент, сервер, БД;
- Многоуровневая: клиент, сервер, БД, еще несколько серверов;

Бывает, что для подстраховки сервера в случае падения, добавляют еще один сервер или несколько серверов и называется это Кластером Серверов. Это определенное количество серверов, объединенных в группу и образующих единый ресурс.
Чтобы клиент понимал, на какой из этих серверов слать запрос, перед кластером серверов ставят Балансировщик. Балансировщик смотрит, какой из серверов в данный момент меньше загружен и шлет запрос туда.

Так же существуют кластеры БД.


2) Что ткое HTTP и HTTPS

HTTP (HyperText transfer Protocol) или "протокол передачи гипертекста"
Задача, которая решается с помощью HTTP - это обмен данными между клиентом и сервером.
Сам по себе протокол HTTP не предполагает использование шифрования для передачи информации. Для этого есть расширение HTTPS (HyperText Transfer Protocol Secure).
HTTPS - это безопасный протокол передачи данных, который поддерживает шифрование посредством криптографических протоколов SSL и TLS и является расширенной версией протокола HTTP

3) HTTP методы

Для разграничения действий с ресурсами на уровне HTTP-методов были придуманы следующие варианты:
GET - запрашивает представление ресурса. Такие запросы могут только извлекать данные.
HEAD - Запрашивает ресурс, как и GET, но ответ приходит без тела
POST - Отправлеет сущности к указанному ресурсу. Может вызывать побочные эффекты на сервере и изменение состояния.
PUT - Заменяет текущие представления ресурса данными запроса.
DELETE - удаляет указанный ресурс
CONNECT - настраивает тунель с сервером, определенным по ресурсу
OPTIONS - Описывает параметры соединения с ресурсом
TRACE - Вызывает возвращаемое текстовое сообщение с ресурса
PATCH - Частично изменяет ресурс


4) HTTP статус коды сервера

Код ответа (состояния) HTTP показывает, был ли успешно выполнен определенный HTTP запрос. Коды сгрупированны в 5 классов:
1. Информационные 100-199;
2. Успешные 200-299;
3. Перенаправления 300-399;
4. Клиентские ошибки 400-499;
5. Серверные ошибки 500-599

Если получен код ответа (состояния), которого нет в данном списке, в таком случае он является не стандартизованным кодом ответа, вероятнее всего он кастомный сервера.

5) Что такое ядро браузера 

Браузер = оболочка + ядро.
Среди них относительно больше типов оболочек, чем ядер. Оболочка браузера это, например: меню, панели инструментов и т.д. Ядро - это программа или модуль, который отображает контент на основе языка разметки.
Ядро браузера можно разделить на две части: движок рендеринга (инженер макета) и движок JS Движок браузера преобразует содержимое веб-страниц (файлы HTML, XML, цифровые изображения и т.д.) и информацию о форматировании (в форматах CSS, XSL и т.д.) в интерактивное изображение содержимого на экране. Браузерный движок используется в программах, предназначенных для отображения и редактирования веб-страниц, а именно в веб-браузерах, почтовых клиентах и др. Не 
Не стоит путать понятия "браузерный движок" и "браузер"
Браузер - это оболочка для браузерного движка со своими дополнительными програмными надстройками.
Разные браузеры могут работать на одном браузерном движке.

6) Какие браузеры какиие ядра используют
7) Что такое API
8. Что такое ендпоинты
9) URL (URI, URL, URN)
10) Идемпотентные HTTP методы

Это методы, при повторном выполнении которых результаты ожидаемо одинаковые. GET, HEAD, PUT, DELETE, OPTIONS, TRACE
Неидемпотентные - при повторном выполнении результат будет отличаться. POST и PATCH

11) Безопасные HTTP методы

Это методы, которые не меняют данные и их можно выполнять в любой последовательности. К ним относятся GET, HEAD, OPTIONS

12) Иденфикация, Аутентификация, Авторизация
13) Что такое IP
14) Что такое октаты в DNS
15) Что такое порт, сколько портов у Linux сервера
16) Уровни OSI
17) Хедеры http запросов