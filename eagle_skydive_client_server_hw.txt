HW
Client_Server
1) Прочиать про клиент-серверную архитектуру

Клиент-серверная архитектура это вычислительная или сетевая архитектура, в которой сетевая нагрузка распределены между поставщиками услуг (серверами) и заказчиками услуг (клиентами). Как правило, основная нагрузка расположена на сервере, который является мощной вычислительной машиной, а клиент может быть гораздо менее производительным, так как основные функции выполняются на сервере. Клиент лишь получает данные с сервера и отображает их в удобном для ползователя виде. Но может быть, что основная нагрузка ложится на устройство пользователя, хоть он и является клиентом, а сервер лишь хранит данные. Таким примером могут быть онлайн-игры.

Уровни клиент-серверной архитектуры:
- Двухуровневая: клиент, сервер;
- Трехуровневая: клиент, сервер, БД;
- Многоуровневая: клиент, сервер, БД, еще несколько серверов;

Бывает, что для подстраховки сервера в случае падения, добавляют еще один сервер или несколько серверов и называется это Кластером Серверов. Это определенное количество серверов, объединенных в группу и образующих единый ресурс.
Чтобы клиент понимал, на какой из этих серверов слать запрос, перед кластером серверов ставят Балансировщик. Балансировщик смотрит, какой из серверов в данный момент меньше загружен и шлет запрос туда.

Так же существуют кластеры БД.


2) Что ткое HTTP и HTTPS

HTTP (HyperText transfer Protocol) или "протокол передачи гипертекста"
Задача, которая решается с помощью HTTP - это обмен данными между клиентом и сервером.
Сам по себе протокол HTTP не предполагает использование шифрования для передачи информации. Для этого есть расширение HTTPS (HyperText Transfer Protocol Secure).
HTTPS - это безопасный протокол передачи данных, который поддерживает шифрование посредством криптографических протоколов SSL и TLS и является расширенной версией протокола HTTP

3) HTTP методы

Для разграничения действий с ресурсами на уровне HTTP-методов были придуманы следующие варианты:
GET - запрашивает представление ресурса. Такие запросы могут только извлекать данные.
HEAD - Запрашивает ресурс, как и GET, но ответ приходит без тела
POST - Отправлеет сущности к указанному ресурсу. Может вызывать побочные эффекты на сервере и изменение состояния.
PUT - Заменяет текущие представления ресурса данными запроса.
DELETE - удаляет указанный ресурс
CONNECT - настраивает тунель с сервером, определенным по ресурсу
OPTIONS - Описывает параметры соединения с ресурсом
TRACE - Вызывает возвращаемое текстовое сообщение с ресурса
PATCH - Частично изменяет ресурс


4) HTTP статус коды сервера

Код ответа (состояния) HTTP показывает, был ли успешно выполнен определенный HTTP запрос. Коды сгрупированны в 5 классов:
1. Информационные 100-199;
2. Успешные 200-299;
3. Перенаправления 300-399;
4. Клиентские ошибки 400-499;
5. Серверные ошибки 500-599

Если получен код ответа (состояния), которого нет в данном списке, в таком случае он является не стандартизованным кодом ответа, вероятнее всего он кастомный сервера.

5) Что такое ядро браузера 

Браузер = оболочка + ядро.
Среди них относительно больше типов оболочек, чем ядер. Оболочка браузера это, например: меню, панели инструментов и т.д. Ядро - это программа или модуль, который отображает контент на основе языка разметки.
Ядро браузера можно разделить на две части: движок рендеринга (инженер макета) и движок JS Движок браузера преобразует содержимое веб-страниц (файлы HTML, XML, цифровые изображения и т.д.) и информацию о форматировании (в форматах CSS, XSL и т.д.) в интерактивное изображение содержимого на экране. Браузерный движок используется в программах, предназначенных для отображения и редактирования веб-страниц, а именно в веб-браузерах, почтовых клиентах и др. Не 
Не стоит путать понятия "браузерный движок" и "браузер"
Браузер - это оболочка для браузерного движка со своими дополнительными програмными надстройками.
Разные браузеры могут работать на одном браузерном движке.

6) Какие браузеры какиие ядра используют

Safari - WebKit
Google Chrome - Blink
Яндекс.Браузер - Blink
Microsoft Edge - Blink
Opera - Blink (раньше использовала Presto)
Mozila Firefox - Gecko

7) Что такое API

API (Application programming interface) или програмный интерфейс приложения - это специальнфй протокол для взаимодействия программ, который позволяет использовать функции одного приложения внутри другого.
Например: быстрая регистрация с помощью аккаунта в соц. сетях. Или реклама в соц. сети (например ВК), которая поступает через Яндекс.директ


8. Что такое ендпоинты

Эндпоинт (конечная точка) - представляет собой некий шлюз, который соединяет серверные процессы приложения с внешним интерфейсом. Эндпоинты работают вместе с методами API. Это определенные URL-адреса, которые приложение использует для связи со сторонними службами и своими пользователями. Эндпоинты выполняют конкретную задачу, принимают параметры и возвращают клиенту данные. 

9) URL (URI, URL, URN)

URL (Uniform Resource Locator) или унифицированный указатель ресурса, т.е. адрес сайта размещенного в сети Интернет. URL - та самая ссылка, которая показывается в адресной строке браузера.

URN (Uniform Resourse Name) или унифицированное имя ресурса - неизменяемая последовательность символов определяющая только имя некоторого ресурса. Смысл URN в том, что им единоразово и уникально именуется какая0либо сущность в рамках конкретного пространства имен.

URI (Uniform Resourse Identifier) или унифицированный идентификатор ресурса - это обобщенное понятие идентификации ресурса, включающее как URL, так и URN, как вместе, так и по отдельности. Т.е. можно считать что URI = URL, URI = URN, URI = URL + URN

10) Идемпотентные HTTP методы

Это методы, при повторном выполнении которых результаты ожидаемо одинаковые. GET, HEAD, PUT, DELETE, OPTIONS, TRACE
Неидемпотентные - при повторном выполнении результат будет отличаться. POST и PATCH

11) Безопасные HTTP методы

Это методы, которые не меняют данные и их можно выполнять в любой последовательности. К ним относятся GET, HEAD, OPTIONS

12) Иденфикация, Аутентификация, Авторизация

Это три процесса, защищающие данные от доступа посторонних лиц.
Идентификации - процесс распознования пользователя по его идентификатору
Аутентификация - процесс проверки подлинности, доказательство что пользователь именно тот, за кого себя выдает
Авторизация - представление определенных прав

Сперва происходит процесс идентификации, когда пользователь пытается зайти на некоторый ресурс и система просит ввести индентификатор. Это может быть логин, имя и фамилия, адресс эл. почты или номер мобильного.
После того, как система убедилась, что такой пользователь существует идентификация завершается.

Далее следует процесс аутентификации, в котором пользователю нужно доказать, что он является тем человеком, который регистрировался под логином, введенным при идентификации.
Для доказательства необходимо наличие какого либо типа аутентификационных данных:
Нечто известное только пользователю: pin-коды, пароли, графические ключи, секретные слова;
Нечто, присущее только пользователю. Биометрические данные: сканеры лица, отпечатки пальцев или сетчатки глаза.
Самый распространенный тип аутенцификационных данных - это пароль.

После ввода пользователем пароля система проверяет, соответствует ли пароль имени пользователя, введенного при идентификации. Таким образом происходит аутентификация.

И если все верно и пара логин-пароль верны, то система предоставит пользователю доступ к его ресурсам и данным, то есть произойдет авторизация.

13) Что такое IP

IP-адрес - это уникальный адрес, идентифицирующий устройство в интернете или локальной сети. IP означает "Интернет-протокол" - набор правил, регулирующих формат данных, отправляемых через интернет или локальную сеть.

По сути IP-адрес - это идентификатор, позволяющий передавать информацию между устройствами в сети: он содержит информацию о местоположении устройства и обеспечивает его доступность для связи. IP-адреса позволяют различать компьютеры, маршрутизаторы и веб-сайты в интернете и являются важный компонентом работы интернета.

IP-адрес - это строка чисел, разделенныз точками. IP-адреса представляют собой набор из четырех чисел, например 192.158.1.39. Каждое число в этом наборе принадлежит интервалу от 0 до 255. Таким образом, полный диапазон IP-адресации - это адреса от 0.0.0.0 до 255.255.255.255

14) Что такое октеты в DNS

Октет - 8 двоичных разрядов (8 битов)
Слово октет често употребляется при описании сетевых протоколов, так как они предназначены для взаимодействия компьютеров, имеющих не обязательно одинаковую платформу. В отличие от байты, который может быть равен 10, 12 и т.п. битам, октет всегда равен 8 битам.

15) Что такое порт, сколько портов у Linux сервера

Порт свервера - это цифровой идентификатор программы, обслуживающей определенные интернет соединения на прикрепленном адресе (IP). Идентификатор представляет собой набор цифр весом не более 16 бит, т.е. это может быть произвольное число от 0 до 65535, всего 65536 номеров. Количество портов ограничено с учетом 16-битной адресации (2 в 16 степени = 56536, начало - 0) 

16) Уровни OSI

OSI (Open Systems Interconnection model) состоит из 7 уровней:

1. Физичесикй уровень (physical layer);
2. Канальный уровень (data link layer);
3. Сетевой уровень (network layer);
4. Транспортный уровень (transport layer);
5. Сеансовый уровень (session layer);
6. Уровень представления (presentation layer);
7. Прикладной уровень (application layer).

На седьмом уровне информация представляется в виде данных, на первом - в виде бит. Процесс, когда информация отправляется и переходит из данных в биты, называется инкапсуляцией. Обратный процее, когда инф., полученная в битах на первом уровне, переходит в данные на седьмом, называется декапсуляцией. На каждом из семи уровней инф. представляется в виде блоков данных протокола PDU (Protocol Data Unit)

17) Хедеры http запросов

Заголовки - это определенные параметры, которые несут определенную служебную информацию о соединении по HTTP. Некоторые заголовки имеют лишь информационный характер для пользователя или для компьютера, другие передают определенные команды, исходя из которых, сервер или клиент будет выполнять какие-то действия.

В зависимости от того, где эти заголовки могут находиться, они разделяются на:
1. General Headers (общие заголовки) - используются в запросах и ответах;
2. Request Headers (заголовки запроса) - используются только в запросах;
3. Response Headers (Заголовки ответа) - используются только в ответах;
4. Entity Headers (Заголовки сущности) - сопровождают каждую сущность сообщения. Используются в запросах и ответах.

Некоторые правила написания заголовков:
1. Регистр не учитывается;
2. Пишутся латинскими буквами;
3. После параметра должен идти символ двоеточия (:);
4. Окончанием пары "параметр: значение" служит символ переноса строки.

Примеры заголовков:
Host: webkyrs.info
User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:18.0) Gecko/20100101 Firefox/18.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3

Количество возможных заголовков, которые можно указать, гораздо больше.